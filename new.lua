--!/usr/bin/env lua
-- (NEW & IMPROVED) This script inspects the live character and prints a ready-to-use Lua table.

local Players = game:GetService("Players")
local character = Players.LocalPlayer.Character or Players.LocalPlayer.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

task.wait(3)

local function generateCharacterDataTable()
    print("--- Generating Character Data Table... ---")

    local data = {}

    -- Get Body Part IDs from the base description
    local baseDescription = humanoid:GetAppliedDescription()
    data.BodyParts = {
        Head = baseDescription.Head,
        Torso = baseDescription.Torso,
        LeftArm = baseDescription.LeftArm,
        RightArm = baseDescription.RightArm,
        LeftLeg = baseDescription.LeftLeg,
        RightLeg = baseDescription.RightLeg,
    }

    -- Manually inspect BodyColors (if they exist)
    local bodyColors = character:FindFirstChild("BodyColors")
    if bodyColors then
        data.BodyColors = {
            HeadColor = bodyColors.HeadColor3,
            TorsoColor = bodyColors.TorsoColor3,
            LeftArmColor = bodyColors.LeftArmColor3,
            RightArmColor = bodyColors.RightArmColor3,
            LeftLegColor = bodyColors.LeftLegColor3,
            RightLegColor = bodyColors.RightLegColor3,
        }
    end

    -- Manually inspect Clothing and Face, EXTRACTING IDs from URLs
    local function getAssetIdFromUrl(url)
        return tonumber(string.match(url, "%d+$")) or 0
    end

    local shirt = character:FindFirstChildOfClass("Shirt")
    local pants = character:FindFirstChildOfClass("Pants")
    local shirtGraphic = character:FindFirstChildOfClass("ShirtGraphic")
    local face = character.Head and character.Head:FindFirstChild("Face")

    data.Clothing = {
        Shirt = (shirt and getAssetIdFromUrl(shirt.ShirtTemplate)) or 0,
        Pants = (pants and getAssetIdFromUrl(pants.PantsTemplate)) or 0,
        TShirt = (shirtGraphic and shirtGraphic.Graphic) or 0,
        Face = (face and face:IsA("Decal") and getAssetIdFromUrl(face.Texture)) or 0
    }

    -- Manually inspect Scaling Values
    local function getScaleValue(scaleName, default)
        local scaleInstance = humanoid:FindFirstChild(scaleName)
        return (scaleInstance and scaleInstance:IsA("NumberValue")) and scaleInstance.Value or default
    end
    data.Scaling = {
        HeadScale = getScaleValue("HeadScale", 1),
        DepthScale = getScaleValue("BodyDepthScale", 1),
        HeightScale = getScaleValue("BodyHeightScale", 1),
        WidthScale = getScaleValue("BodyWidthScale", 1),
        BodyTypeScale = getScaleValue("BodyTypeScale", 0),
        ProportionScale = getScaleValue("BodyProportionScale", 0),
    }

    -- Format the data into a clean, copy-pasteable Lua string
    local outputString = [[
-- This data was generated by the in-game inspection script.
-- Paste this entire block into the Roblox Studio model builder script.

local characterMimicData = {
    BodyParts = {
        Head = %d,
        Torso = %d,
        LeftArm = %d,
        RightArm = %d,
        LeftLeg = %d,
        RightLeg = %d,
    },
    Clothing = {
        Shirt = %d,
        Pants = %d,
        GraphicTShirt = %d,
        Face = %d,
    },
    Scaling = {
        BodyTypeScale = %f,
        ProportionScale = %f,
        HeadScale = %f,
        HeightScale = %f,
        WidthScale = %f,
        DepthScale = %f,
    },
]]
    
    local finalString = string.format(outputString,
        data.BodyParts.Head, data.BodyParts.Torso, data.BodyParts.LeftArm, data.BodyParts.RightArm, data.BodyParts.LeftLeg, data.BodyParts.RightLeg,
        data.Clothing.Shirt, data.Clothing.Pants, data.Clothing.TShirt, data.Clothing.Face,
        data.Scaling.BodyTypeScale, data.Scaling.ProportionScale, data.Scaling.HeadScale, data.Scaling.HeightScale, data.Scaling.WidthScale, data.Scaling.DepthScale
    )
    
    -- Add the BodyColors part only if it exists
    if data.BodyColors then
        local colorsString = string.format([[
    BodyColors = {
        HeadColor = Color3.new(%f, %f, %f),
        TorsoColor = Color3.new(%f, %f, %f),
        LeftArmColor = Color3.new(%f, %f, %f),
        RightArmColor = Color3.new(%f, %f, %f),
        LeftLegColor = Color3.new(%f, %f, %f),
        RightLegColor = Color3.new(%f, %f, %f),
    },
]], data.BodyColors.Head.R, data.BodyColors.Head.G, data.BodyColors.Head.B,
   data.BodyColors.Torso.R, data.BodyColors.Torso.G, data.BodyColors.Torso.B,
   data.BodyColors.LeftArm.R, data.BodyColors.LeftArm.G, data.BodyColors.LeftArm.B,
   data.BodyColors.RightArm.R, data.BodyColors.RightArm.G, data.BodyColors.RightArm.B,
   data.BodyColors.LeftLeg.R, data.BodyColors.LeftLeg.G, data.BodyColors.LeftLeg.B,
   data.BodyColors.RightLeg.R, data.BodyColors.RightLeg.G, data.BodyColors.RightLeg.B)
        finalString = finalString .. colorsString
    end
    
    finalString = finalString .. "}"

    -- Print the final result and copy to clipboard
    print(finalString)
    if setclipboard then
        setclipboard(finalString)
        print("\n--- ✅ Character data table copied to clipboard! ---")
    else
        warn("\n--- ⚠️ setclipboard is not available. Manually copy the table above. ---")
    end
end

generateCharacterDataTable()
